<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--加载属性配置文件-->
    <context:property-placeholder location="classpath:datasource.properties,classpath:warest.properties" ignore-unresolvable="true" />

    <!--数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${db.driverClassName}"/>
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
        <!-- 连接池启动时的初始值 -->
        <property name="initialSize" value="${db.initialSize}"/>
        <!--<property name="initialSize" value="5"/>-->
        <!-- 连接池的最大值 -->
        <property name="maxActive" value="${db.maxActive}"/>
        <!--<property name="maxActive" value="20"/>-->
        <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
        <!--<property name="maxIdle" value="${db.maxIdle}"/>-->
        <!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
        <property name="minIdle" value="${db.minIdle}"/>
        <!-- 最大建立连接等待时间。如果超过此时间将接到异常。设为－1表示无限制 -->
        <property name="maxWait" value="${db.maxWait}"/>

        <!--<property name="defaultAutoCommit" value="true"/>-->
        <!--<property name="defaultReadOnly" value="false"/>-->
        <!-- 回收被遗弃的   超时的（一般是忘了释放的）数据库连接到连接池中 -->
        <property name="removeAbandoned" value="true" />
        <!--回收时打印日志，正式运行时关闭-->
        <property name="logAbandoned" value="false" />
        <!-- 数据库连接过多长时间不用将被视为被遗弃而收回连接池中  单位为s -->
        <property name="removeAbandonedTimeout" value="1800" />


        <!-- #连接的最小超时时间，默认为半小时。 -->
        <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}"/>
        <!--# 失效检查线程运行时间间隔     配置60000对应1分钟-->
        <property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}"/>

        <!--开启连接保活-->
        <property name="keepAlive" value="true"/>

        <!--# 空闲时间大于timeBetweenEvictionRunsMillis检查连接有效性的SQL语句-->
        <property name="validationQuery" value="SELECT 1"/>
        <!--# 检查连接是否有效-->
        <property name="testWhileIdle" value="true"/>
        <!--数据库取得连接时，检查有效性  默认false-->
        <property name="testOnBorrow" value="false" />
        <!--归还时检查有效性-->
        <property name="testOnReturn" value="false" />

        <property name="poolPreparedStatements" value="true" />
        <property name="maxOpenPreparedStatements" value="20" />
        <!--提高启动时间-->
        <property name="asyncInit" value="true" />
        <!--监控统计插件-->
        <property name="filters" value="stat, log4j" />
        <!-- 通过connectProperties属性来打开mergeSql功能；慢SQL记录-->
        <!--<property name="connectionProperties" value="druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000" />-->
        <property name="proxyFilters">
            <list>
                <ref bean="log-filter"/>
                <ref bean="stat-filter"/>
            </list>
        </property>
    </bean>

    <!--日志拦截器解决不知为何重复打印的问题-->
    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
        <!--<property name="resultSetLogEnabled" value="false" />-->
        <!--<property name="statementLogEnabled" value="false" />-->
        <!--<property name="connectionLogEnabled" value="false" />-->
        <property name="dataSourceLogEnabled" value="true" />
        <property name="statementExecutableSqlLogEnable" value="true" />
    </bean>
    <!--Start 慢SQL记录-->
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <!-- 慢sql时间设置,即执行时间大于1秒的都是慢sql -->
        <property name="slowSqlMillis" value="1000"/>
        <property name="logSlowSql" value="true"/>
    </bean>


    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath*:mappers/*Mapper.xml"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--别名设置,导致日志报错，在mybatis配置也没用-->
        <!--<property name="typeAliasesPackage" value="com.warest.mall.domain"></property>-->
        <!-- 分页插件 -->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <props>
                            <prop key="helperDialect">mysql</prop>
                            <!--分页合理化参数，为true时，<=0页查全部-->
                            <prop key="reasonable">true</prop>
                        </props>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!--配置mapper 自动扫描mapper接口 -->
    <bean name="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--会话工厂名-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--接口包名-->
        <property name="basePackage" value="com.warest.mall.dao"/>
    </bean>


    <!-- 基于AspectJ的自动代理.使用AnnotationAwareAspectJAutoProxyCreator  -->
    <!--proxy-target-class="true" Spring建议
通过 <tx:annotation-driven/> 元素的 "proxy-target-class" 属性值来控制是基于接口的还是基于类的代理被创建。
如果 "proxy-target-class" 属值被设置为 "true"，那么基于类的代理将起作用（这时需要CGLIB库cglib.jar在CLASSPATH中）。
如果 "proxy-target-class" 属值被设置为 "false" 或者这个属性被省略，那么标准的JDK基于接口的代理将起作用。
 接口上的注解不能继承
-->
    <!-- 使用@Transactional进行声明式事务管理需要声明下面这行 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

    <!-- 事务管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
        <!--提交失败是否回滚-->
        <property name="rollbackOnCommitFailure" value="true"/>
    </bean>



</beans>
